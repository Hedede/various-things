#!/usr/bin/bash
# Copyright (C) 2014  Hedede <hededrk@gmail.com>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#set -x
libpath=$PWD/lib

aur_git="https://aur.archlinux.org/cgit/aur.git"
build_dir=build-aur
pkg_dir="pkg/aur"
repo_dir=repo
repo_file="awrepo.db.tar.xz"
tmpdir="/tmp/aur-add"
carch="x86_64"

pushd() { builtin pushd $1 > /dev/null; }
popd()  { builtin popd  $1 > /dev/null; }

fetch()
{
	local code=$(curl -w '%{http_code}\n' -o "$1" "$2")

	[[ $code = 200 ]] || return 1
}

fetch_pkg()
{
	local pkgname=$1
#	local aur="https://aur.archlinux.org/packages"
#	local pkgurl="${aur}/${pkgname:0:2}/${pkgname}/${pkgname}.tar.gz"
	local pkgurl="${aur_git}/snapshot/${pkgname}.tar.gz"

	pushd "$build_dir"
	fetch "${pkgname}.tar.gz" "$pkgurl"
	popd
}

extract_pkg()
{
	local pkgname=$1

	pushd "$build_dir"
	tar -xvf "${pkgname}.tar.gz"  || return 1
	popd
}

verify_pkgbuild()
{
	local pkgname=$1
#	local aur="https://aur.archlinux.org/packages"
#	local pkgurl="${aur}/${pkgname:0:2}/${pkgname}/PKGBUILD"
	local pkgurl="${aur_git}/plain/PKGBUILD?h=${pkgname}"

	pushd "$tmpdir"

	if ! fetch "${pkgname}.tar.gz" "$pkgurl"
	then
		print_nice bR "Package not found" && return 1
	fi

	[[ -z $EDITOR ]] && EDITOR=vi

	$EDITOR $pkgname

	popd

	print_nice 'b' ":: Build package? [yes/no]"

	local CONFIRM="no"
	read CONFIRM
	[[ "$CONFIRM" == "yes" ]] || return 1
}


check_deps()
{
	:
}

build_package()
{
	local pkgname=$1

	pushd "${build_dir}/${pkgname}"
	makepkg -sf --sign || return 1

	popd
}

backup_old()
{
	local pkgname=$1

	pushd "$pkg_dir"
	mv "$pkgname"*'.pkg.tar'* "./old"
	popd
}

check_existance()
{
	pkglist_find "$1"
	[[ $? = 0 ]] && echo true || echo false
}

add_to_repo()
{
	local pkgname=$1
	local vers=$(pkgbuild_get v "$pkgname")
	local arch=$(pkgbuild_get a "$pkgname")
	local pkgext=$(pkgbuild_get x "$pkgname")
	
	local exists=$(check_existance "$pkgname")
	
	[[ $exists = true ]] && backup_old "$pkgname"

	local filename="${pkgname}-${vers}-${arch}" #.pkg.tar.xz
	mv "${build_dir}/${pkgname}/${filename}.pkg.tar"* "${pkg_dir}"
	
	local repo_db="${repo_dir}/${repo_file}"
	local pkg_tar="${pkg_dir}/${filename}${pkgext}"
	repo-add "$repo_db" "$pkg_tar" || return 1

	if [[ $exists = true ]]
	then
		pkglist_update "$pkgname" 'aur' "$vers"
	else
		pkglist_add    "$pkgname" 'aur' "$vers"
	fi
}

get_pkg()
{
	local pkg=$1

	print_nice 'bB' "Fetching tarball ..."
	fetch_pkg		$1		|| exit 1
	print_nice 'bB' "Extracting tarball ..."
	extract_pkg		$1		|| exit 1

	# Overwrite PKGBUILD with one reviewed by user
	[[ -e $1 ]] && mv -f "${tmpdir}/$1" "${build_dir}/$1/PKGBUILD"

	#print_nice 'bB' "Checking dependencies ..."
	check_deps

	print_nice 'bB' "Building ${pkg} ..."
	build_package	      	$1		|| exit 1
	print_nice 'bB' "Adding ${pkg} into local repository ..."
	add_to_repo		$1		|| exit 1
}

remove_pkg()
{
	local pkgname=$1

	backup_old $pkgname
	repo-remove "${repo_dir}/${repo_file}" "$pkgname"
	pkglist_remove "$pkgname"
}

add_pkg()
{
	print_nice 'bB' "Fetching PKGBUILD ..."
	verify_pkgbuild $1 || exit 1

	# pkg_is_split=$(pkgbuild_get s "$1" "$1")
	# pkg_name=$(pkgbuild_get n "$1" "$1")
	# pkg_base=$(pkgbuild_get b "$1" "$1")

	get_pkg $1
}

update_queue_pkg()
{
	local pkg=$1

	verify_pkgbuild	$pkg || return 1
	update_queue+=("$pkg")
}

update_run()
{
	[[ ${#update_queue[@]} -eq 0 ]] && print_nice bG 'Nothing to do' && exit 1

	for pkg in ${update_queue[@]}
	do
		get_pkg $pkg $repo
	done
}

update_repo()
{
	local id=0

	unset update_queue
	
	for pkg in ${pkglist[@]}
	do
		local pkgver=$(package-query -Af "%v" "$pkg")
		print_nice 'bR' "$pkgver"
		print_nice 'bG' "${pkglist_ver[$id]}"
		if ! [[ "$pkgver" == "${pkglist_ver[$id]}" ]]
		then
			print_nice 'bB' "Updating ${pkg}..."
			update_queue_pkg ${pkg}
		fi

		let id++
	done

	update_run
}

source lib/args.sh
source lib/print_nice.sh
source lib/pkglist.sh
source lib/pkgbuild.sh

[[ -d $tmpdir ]]        || mkdir "$tmpdir"
[[ -d "$pkg_dir/old" ]] || mkdir "$pkg_dir/old"

explode_args $@
set -- "${OPTS[@]}"

# Parse arguments
while [[ $# > 0 ]]
do
	arg="$1"
	shift

	case $arg in
	-R|--remove)
		action='remove'
		;;
	-A|--aur)
		action='add'
		;;
	-U|--update)
		action='sync'
		;;
	-C|--check)
		action='check'
		;;
	--)
		shift
		ARGS+=("$@")
		break
		;;
	*)
		ARGS+=("$arg")
		;;
	esac			
done

set -- "${ARGS[@]}"

pkg=$1

load_pkglist "$pkg_dir"

case $action in 
	'remove')
		print_nice 'bB' "Removing package ${pkgname}..."
		remove_pkg	$pkg
		;;
	'add')	add_pkg		$pkg
		;;
	'check')
		check_existance $pkg
		;;
	'sync')
		update_repo
		;;
	*)
		print_nice bR 'No action specified'
esac

save_pkglist "$pkg_dir"
